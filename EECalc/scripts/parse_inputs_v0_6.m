function [ In] = parse_inputs_v0_6(Inraw)
%Parses the raw input cell array and converts to an input structure
%   This version uses the cell array generated by read_inputs_v0.5 that
%   removes any non-input lines

% V0.5 20-Dec-2012 RTM Made sure it worked with Gnu-Octave

% V0.4 12-Dec-2012 RTM converted to work with the most current of output
% from read_inputs.m

startval=8;
In.terrain_class=cell2mat(Inraw(startval));  % Terrain class

% set the starting row for the building program info
startval=9;  
In.stories=cell2mat(Inraw(startval));  % number of stories tall
In.cond_flr_area=cell2mat(Inraw(startval+1)); % total conditioned floor area
In.ftof=cell2mat(Inraw(startval+2)); % average floor-to-floor height
In.occ_day_start=cell2mat(Inraw(startval+3)); % day (1 to 7) that starts the occupied period.  1 = monday
In.occ_day_end=cell2mat(Inraw(startval+4)); % day (1 to 7) that ends the occupied period.
In.occ_hour_start=cell2mat(Inraw(startval+5)); % hour that full load building starts to be occupied
In.occ_hour_end = cell2mat(Inraw(startval+6)); % hour that full load occupancy stops
In.people_density_occ= cell2mat(Inraw(startval+7)); % design people density (people/m2)
In.people_density_unocc = cell2mat(Inraw(startval+8)); % fraction of design occupancy during occupied times

% set starting row offset for internal temp set points
startval=18;
In.ht_tset_occ = cell2mat(Inraw(startval+0)); % heating temp set point during occupied times
In.ht_tset_unocc = cell2mat(Inraw(startval+1)); % heating temp set point during unoccupied times i.e. heating temp setback
In.cl_tset_occ = cell2mat(Inraw(startval+2)); % cooling temp set point during occupied times i.e. heating temp setback
In.cl_tset_unocc = cell2mat(Inraw(startval+3)); % cooling temp set point during unoccupied times i.e. heating temp setback

% set starting row offset for plugload info
startval=22;
In.elec_plug_dens_occ = cell2mat(Inraw(startval+0)); % electric plugload density W/m2 during occupied teams
In.elec_plug_dens_unocc = cell2mat(Inraw(startval+1)); % electric plugload density W/m2 during unoccupied teams
In.gas_plug_dens_occ = cell2mat(Inraw(startval+2)); % gas plugload density W/m2 during occupied teams
In.gas_plug_dens_unocc = cell2mat(Inraw(startval+3)); % gas plugload density W/m2 during unoccupied teams

% set starting row offset for lighting
startval=26;
In.LPD_occ = cell2mat(Inraw(startval+0)); % interior lighting power density when occupied
In.LPD_unocc = cell2mat(Inraw(startval+1)); % interior lighting power density when unoccupied
In.E_lt_ext = cell2mat(Inraw(startval+2)); %exterior lighting power
In.daylighting_sensor=cell2mat(Inraw(startval+3));  % type of daylighting sensor installed, 1=none
In.lighting_occupancy_sensor=cell2mat(Inraw(startval+4)); % type of occupancy sensor control for lighting, 1=none, 
In.lighting_constant_illumination = cell2mat(Inraw(startval+5)); %type of constant illumination control implemented 1=none


% set starting row for HVAC
startval=35;
In.COP =cell2mat(Inraw(startval+0));  % COP for cooling system
In.PLV = cell2mat(Inraw(startval+1)); %ILPV = Partial Load Value = EER/SEER.
In.HVAC_system_type = cell2mat(Inraw(startval+2));
In.heat_energy_type = cell2mat(Inraw(startval+3));
In.heat_sys_eff = cell2mat(Inraw(startval+4));

startval=40;  % set offset for ventilation
In.vent_type = cell2mat(Inraw(startval+0));  % ventilation type, 1=mech, 2= mech + natural, 3=natural only
In.vent_supply_rate = cell2mat(Inraw(startval+1)); % ventilation fresh air supply rate
In.vent_supply_diff = cell2mat(Inraw(startval+2)); % ventilation fresh air supply rate - exhaust rage
In.vent_heat_recovery = cell2mat(Inraw(startval+3));  % efficiency of heat recovery (0 for no heat recovery)
In.vent_recirc_fraction = cell2mat(Inraw(startval+4));  % fraction of exhaust air recirculated 1=none, 4 = 60%
In.infilt_level = cell2mat(Inraw(startval+5));  % infiltration level 1=very tight, 5= very loose. 

startval=48;  % set offset for domestic hot water (DHW) system
In.DHW_demand = cell2mat(Inraw(startval));  % DHW demand (m3/yr)
In.DHW_sys_eff = cell2mat(Inraw(startval+1));  % DHW heater system efficiency
In.DHW_dist_sys_type = cell2mat(Inraw(startval+2)); %  DHW dist system 1=all taps within 3m of generation, 2 = taps more than 3m, 3= circulation system or unknown
In.DHW_energy_type = cell2mat(Inraw(startval+3));  % 1=elec, 2=gas

startval = 52;  %set offset for BEM
In.BEM_type = cell2mat(Inraw(startval));  % Type of Building Energy Management installed, 

startval = 53;  % set offset for heat capacity
In.HC_level = cell2mat(Inraw(startval)); % Heat Capacity of building including interior and exterior walls



startval = 55;  % set offset for fan system
In.fan_specific_power = cell2mat(Inraw(startval)); % specific fan power W/(L/s))
In.fan_flow_ctrl_factor = cell2mat(Inraw(startval+1)); % average fan control reduction factor


startval = 87;  % set offset for heat capacity
In.heat_capacity_int=cell2mat(Inraw(startval)); % average heat gain per person 
In.heat_capacity_env=cell2mat(Inraw(startval+1));

startval = 89; % set offset for infiltration rate
In.infilt_rate = cell2mat(Inraw(startval));  % infiltration rate for 75 Pa in m3/h/m2

startval=90; % set HVAC loss factors
In.hotcold_waste_factor=cell2mat(Inraw(startval)); % simultaneous heating/cooling waste factor
In.heat_loss_factor=cell2mat(Inraw(startval+1)); % HVAC system heating loss factor
In.cool_loss_factor=cell2mat(Inraw(startval+2)); % HVAC system cooling loss factor
In.DHW_dist_eff=cell2mat(Inraw(startval+3));
In.pump_heat_ctrl_factor= cell2mat(Inraw(startval+4)); % average heat pump control reduction factor
In.pump_cool_ctrl_factor = cell2mat(Inraw(startval+5)); % average cooling pump control reduction factor


startval = 99;  % set offset for heat gain per person
In.htgain_per_person=cell2mat(Inraw(startval)); % average heat gain per person 

%%  
% extract the geometry input and building envelope data from the array
% making sure to put it into row arrays with columns being the different
% directions in the order [S, SE, E, NE, N, NW, W, SW]

startval=69;
In.wall_area=zeros(1,9);
for I=1:9
    In.wall_area(I)=cell2mat(Inraw(startval+I-1));
%    printf("I=%d In.wall_area(I)=%10.10f\n", I, In.wall_area(I));
end

startval=78;
In.win_area=zeros(1,9);
for I=1:9
    In.win_area(I)=cell2mat(Inraw(startval+I-1));
end

%%  Extract wall and window info and generate arrays
% Generate the wall and window info arrays assuming uniform window and wall
% properties on all surfaces.  If this is not the case we need to use a
% different input sheet

Z=ones(1,9);  % create an array of ones for multiplication by a scalar

startingval=57;  % extract the main wall info
In.wall_U=Z*cell2mat(Inraw(startingval));
In.wall_solar_alpha=Z*cell2mat(Inraw(startingval+1));
In.wall_thermal_emiss=Z*cell2mat(Inraw(startingval+2));

startingval=60; % extract the main window info
In.win_U=Z*cell2mat(Inraw(startingval));
In.win_SHGC=Z*cell2mat(Inraw(startingval+1));
In.win_SCF=Z*cell2mat(Inraw(startingval+2));
In.win_SDF=Z*cell2mat(Inraw(startingval+3));

startingval=64;  % now extract the roof info and put into the wall 
In.wall_U(9)=cell2mat(Inraw(startingval));
In.wall_solar_alpha(9)=cell2mat(Inraw(startingval+1));
In.wall_thermal_emiss(9)=cell2mat(Inraw(startingval+2));

startingval=67;  % grab skylight info and put into the window array
In.win_U(9)=cell2mat(Inraw(startingval));
In.win_SHGC(9)=cell2mat(Inraw(startingval+1));

return

